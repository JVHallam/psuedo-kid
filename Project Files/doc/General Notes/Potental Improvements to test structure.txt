At the minute, the following happens:
	You have an MU assert in a function
		returns a string if an assertion fails

		returns a 0 if the assert succeeds.

	MU run test runs the function with the assert
		Stops early	if one of the mu asserts fails

What i could have:
	A linked list of error structs

	failure_struct:	
		The message given from the failed function

		the value of tests_run at the time

Each failed tests appends the linked list.

At the end of the testing, the linked list is printed to screen.

Why:
	The fact that minunit is 4 lines of code is nice, but i would rather it didn't die the moment a function failed.

	I could bundle all of this into the new munit file. A couple of #define functions and we're done.


So what would happen?:
	you'd have a test_function	
	
	The test function calls assert
	
	you'd have a function to run all tests
	
	that would contain mu_run_test(test_function_pointer);
	
		If a test passes, it should move on with no changes
		
		If the test fails, it should be appended onto our linked list of failed
		tests
		
	Once the tests have finished running:
		If there are no failed tests:
			Let the user know that this file finished testing with 0 errors
			
		If there are failed tests
			Print the message and the tests' number
			
What's needed:
	mu_assert()
	
	mu_run_test()
	
	append_list
	
	create_error_struct
	
	error_struct
	
	print_list_also_freeing_the_space_taken_up